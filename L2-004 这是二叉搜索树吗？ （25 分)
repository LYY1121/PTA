#include<algorithm>
#include<set>
#include<vector>
#include<queue>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<set>
#include<vector>
#include<queue>
#include<cmath>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<ctime>
#include<map>
#include<stack>
#include<string>
#include<iomanip>
#define mem(a) memset(a,0,sizeof(a))
using namespace std;
typedef long long ll;
const int maxn=2e5+5;
int tree[maxn];
struct node{
    int val;
    node *lson,*rson;
    node():lson(NULL),rson(NULL){}
}*root;
int n;
vector<int>ans;
bool test(bool kind,int L,int R)
{
    if(L>=R)
        return true;
    int i;
    for(i=L+1;i<=R;i++)
    {
        if(kind)
        {
            if(tree[L]<=tree[i])
                break;
        }
        else {
            if(tree[L]>tree[i])
                break;
        }
    }
    bool flag=true;
    for(int j=i;j<=R;j++)
    {
        if(kind)
        {
            if(tree[j]<tree[L])
                flag=false;

        } else {
                if(tree[j]>=tree[L])
                    flag=false;
            }
    }
    if(flag)
        return (test(kind,L+1,i-1)&&test(kind,i,R));
    else return false;
}
node *create(bool kind,int L,int R)
{
    if(L>R)
        return NULL;
    int i;
    for(i=L+1;i<=R;i++)
    {
        if(kind)
        {
            if(tree[L]<=tree[i])
                break;
        }
        else {
            if(tree[L]>tree[i])
                break;
        }
    }
    node *p=new node();
    p->val=tree[L];
    p->lson=create(kind,L+1,i-1);
    p->rson=create(kind,i,R);
    return p;
}
int tt;
void print(node *p)
{
    if(p)
    {
        print(p->lson);
        print(p->rson);
        ans.push_back(p->val);
    }
}
int main()
{
    cin>>n;
    tt=0;
    for(int i=0;i<n;i++)
    {
        cin>>tree[i];
    }
    int flag=0;
    if(test(true,0,n-1))
    {
        flag=1;
        root=create(true,0,n-1);
    }
    else if(test(false,0,n-1))
    {
        flag=2;
        root=create(false,0,n-1);
    }
    if(flag!=0)
    {
        puts("YES");
        print(root);
        int len=ans.size();
        for(int i=0;i<len-1;i++)
            cout<<ans[i]<<' ';
        cout<<ans[len-1]<<endl;
    }
    else puts("NO");
}

